

このページで勉強できること
特定のページに共通する処理をまとめるレイアウトの概要
このページの内容を身につけるとできるようになること
viewで設定するタイトルやサイドバーなど、共通する部分をまとめて指定するレイアウトというのでコードを記述する量が減らせます。
またそれだけでなく、後から変更を加えたくなっても楽々加えられるプログラマにやさしい設計にすることも出来ます。
まだまだ色々ありますが、Railsの考えられた設計を体感してみましょう！

少しだけ動的なページ
前回までで静的ページのアクションとviewを作成しました。
今回は、ページごとに内容が変化する、少しだけ動的なページに書き換えてみます。

ページ別のタイトル変更

実際に各ページが表示される様になったところで、それぞれのページごとに固有のタイトルが表示されるようにしていきましょう。
タイトルとはHTMLファイルの<head>タグの中にある<title>のタグで囲まれた内容のことです。
titleタグの内容は、chromeなどのブラウザでタブに表示されています。
titleタグはそのページで扱うものを示す重要なワードで有る為、Google等での検索時により上位へ表示させる「検索エンジン最適化」 (SEO:Search Engine Optimization) でも重要な位置付けになっています。

さて、titleタグの内容を変更するにあたり、各ページのviewのファイル（index.html.erbなど）にはHTMLの一部しか記述していません。
しかし、ブラウザで /static_pages/home にアクセスし、HTMLのソースを表示してみると、しっかりとしたHTML構造になっています。（コード１）

コード１ /static_pages/home ページのHTMLコード

<!DOCTYPE html>
<html>
<head>
  <title>SampleApp</title>
  <link data-turbolinks-track="true" href="/assets/application.css?body=1" media="all" rel="stylesheet" />
<link data-turbolinks-track="true" href="/assets/static_pages.css?body=1" media="all" rel="stylesheet" />
  <script data-turbolinks-track="true" src="/assets/jquery.js?body=1"></script>
<script data-turbolinks-track="true" src="/assets/jquery_ujs.js?body=1"></script>
<script data-turbolinks-track="true" src="/assets/turbolinks.js?body=1"></script>
<script data-turbolinks-track="true" src="/assets/static_pages.js?body=1"></script>
<script data-turbolinks-track="true" src="/assets/application.js?body=1"></script>
  <meta content="authenticity_token" name="csrf-param" />
<meta content="Id+UUPhVKHeJ7mDDJTBihNegrwci3+0z55etVsQzuXU=" name="csrf-token" />
</head>
<body>

<h1>Sample App</h1>
<p>
    This is the home page for the
  <a href="http://railstutorial.org/">Ruby on Rails Tutorial</a>
    sample application.
</p>


</body>
</html>
home.html.erb などにはそのページの一部のコードしか書いていませんでしたが、ここでは完成されたHTML（headタグ等を含んだHTMLファイル）として出力されています。
なぜ完成されたHTMLとして出力されているかというと、外枠の構造を定義しているファイルが別に存在して、その外枠と合わさったうえで出力されているからです。
このHTMLの外枠（HTMLのmetaタグ等を含んだ全体の構成）が書かれたファイルをレイアウトファイルと呼んでいます。

rails newコマンドを実行した段階で、app/views/layouts/application.html.erbというレイアウトファイルが作成されています。（コード２）
なお、レイアウトファイル自体を複数用意することも出来ます

コード２ sample_appのレイアウトファイル

app/views/layouts/application.html.erb

<!DOCTYPE html>
<html>
<head>
  <title>SampleApp</title>
  <%= stylesheet_link_tag    "application", media: "all", "data-turbolinks-track" => true %>
  <%= javascript_include_tag "application", "data-turbolinks-track" => true %>
  <%= csrf_meta_tags %>
</head>
<body>

<%= yield %>

</body>
</html>
次の行に注目して下さい。

<%= yield %>
上記のコードによりそれぞれのviewの内容（home.html.erbなど）がレイアウト（application.html.erb）の該当箇所へ置換えられます。
具体的な動作としては、/static_pages/homeにアクセスした場合、app/views/static_pages/home.html.erb（view）の内容がHTMLとして解釈されて、レイアウトファイルの<%= yield %>の位置に置換えられます。
この辺りは少々難解なので、現時点では概要をつかむ程度の理解でも良いでしょう。
また、デフォルトのレイアウトには次に示す特殊な記述も存在します。

<%= stylesheet_link_tag ... %>
<%= javascript_include_tag "application", ... %>
<%= csrf_meta_tags %>
これらのコードは、上からCSS/JavaScript、およびcsrf_meta_tagsメソッドを各ページヘ取り込むためのものです。
csrf_meta_tagsはクロスサイトリクエストフォージェリからサービス（および使用者）を守るためにRailsに備わっているメソッドです。
簡単に言うとトークン（ランダムな文字列）をHTML出力時に挿入して、ページの遷移が適切かを確認して、不用意にアクション（投稿など）を実行させないようにするためのものです。

ではこれから、レイアウトファイルおよびHome/Help/Aboutのviewファイルに変更を加えていきます。
レイアウトで出るタイトルをRuby on Rails Tutorial Sample App | Homeのように最後の部分がページ別に変わるようにしていきます。

ページ	URL	ベースタイトル	追加タイトル
Home	/static_pages/home	"Ruby on Rails Tutorial Sample App"	"Home"
Help	/static_pages/help	"Ruby on Rails Tutorial Sample App"	"Help"
About	/static_pages/about	"Ruby on Rails Tutorial Sample App"	"About"
表１sample_appのページ別タイトル
レイアウトファイルとviewファイルの変更

まずはじめにレイアウトファイルから変更しましょう。
コード４のように更新を行ってください。

コード4 sample_appの更新後のレイアウトファイル

app/views/layouts/application.html.erb

<!DOCTYPE html>
<html>
<head>
  <title>Ruby on Rails Tutorial Sample App | <%= yield(:title) %></title>
  <%= stylesheet_link_tag    "application", media: "all",
                                            "data-turbolinks-track" => true %>
  <%= javascript_include_tag "application", "data-turbolinks-track" => true %>
  <%= csrf_meta_tags %>
</head>
<body>

<%= yield %>

</body>
</html>